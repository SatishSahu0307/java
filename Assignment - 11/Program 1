import java.util.InputMismatchException; // Required for handling non-numeric input
import java.util.Scanner; // Required for reading user input

/**
 * This Java program accepts two numbers from the user,
 * performs division, and includes robust exception handling
 * for common issues like division by zero and invalid input.
 */
public class DivisionCalculator {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Create a Scanner object to read user input
        double numerator = 0; // Initialize numerator
        double denominator = 0; // Initialize denominator
        boolean validInput = false; // Flag to control input loops

        // --- Get Numerator Input ---
        while (!validInput) {
            System.out.print("Enter the numerator (the number to be divided): ");
            try {
                numerator = scanner.nextDouble(); // Attempt to read a double
                validInput = true; // Input was valid, exit loop
            } catch (InputMismatchException e) {
                // Catch block for non-numeric input
                System.out.println("Invalid input. Please enter a valid number for the numerator.");
                scanner.next(); // Consume the invalid input to prevent an infinite loop
            }
        }

        validInput = false; // Reset flag for denominator input

        // --- Get Denominator Input ---
        while (!validInput) {
            System.out.print("Enter the denominator (the number to divide by): ");
            try {
                denominator = scanner.nextDouble(); // Attempt to read a double

                // Check for division by zero before proceeding
                if (denominator == 0) {
                    System.out.println("Error: Cannot divide by zero. Please enter a non-zero denominator.");
                } else {
                    validInput = true; // Input was valid and not zero, exit loop
                }
            } catch (InputMismatchException e) {
                // Catch block for non-numeric input
                System.out.println("Invalid input. Please enter a valid number for the denominator.");
                scanner.next(); // Consume the invalid input
            }
        }

        // --- Perform Division and Handle Arithmetic Exception (though checked above, good practice) ---
        try {
            double result = numerator / denominator;
            System.out.println("Result of division: " + numerator + " / " + denominator + " = " + result);
        } catch (ArithmeticException e) {
            // This specific catch block for ArithmeticException might not be strictly
            // necessary here because we already handle denominator == 0 explicitly.
            // However, it's good to demonstrate its usage for other arithmetic errors
            // if they were to occur (e.g., in more complex calculations).
            System.out.println("An unexpected arithmetic error occurred: " + e.getMessage());
        } finally {
            // The finally block executes regardless of whether an exception occurred or not.
            // It's a good place to close resources like the scanner.
            scanner.close();
            System.out.println("Calculation complete. Scanner closed.");
        }
    }
}
