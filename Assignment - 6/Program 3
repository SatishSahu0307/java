import java.util.*;
class Person {
    String name;
    String id; // Could be a student ID or employee ID

    // Constructor for Person
    public Person(String name, String id) {
        this.name = name;
        this.id = id;
        System.out.println("Person constructor called for: " + name);
    }

    // Method to display basic person details
    public void displayDetails() {
        System.out.println("--- Person Details ---");
        System.out.println("Name: " + name);
        System.out.println("ID: " + id);
    }

    // Generic method that subclasses might specialize
    public void describeRole() {
        System.out.println(name + " is a general person in the system.");
    }
}

// Student.java - Derived Class from Person (Child 1)
class Student extends Person {
    String major;
    double gpa;

    // Constructor for Student
    public Student(String name, String id, String major, double gpa) {
        super(name, id); // Call to Person's constructor
        this.major = major;
        this.gpa = gpa;
        System.out.println("Student constructor called for: " + name);
    }

    // Method to display student-specific details
    public void displayStudentDetails() {
        displayDetails(); // Reuse Person's display method
        System.out.println("Major: " + major);
        System.out.println("GPA: " + String.format("%.2f", gpa));
        System.out.println("-------------------------");
    }

    // Overriding the describeRole method from the Person class
    @Override
    public void describeRole() {
        System.out.println(name + " is a student majoring in " + major + ".");
    }

    // New method specific to the Student class
    public void study() {
        System.out.println(name + " is currently studying for exams.");
    }
}

// Professor.java - Derived Class from Person (Child 2)
class Professor extends Person {
    String department;
    double salary;
    String specialization;

    // Constructor for Professor
    public Professor(String name, String id, String department, double salary, String specialization) {
        super(name, id); // Call to Person's constructor
        this.department = department;
        this.salary = salary;
        this.specialization = specialization;
        System.out.println("Professor constructor called for: " + name);
    }

    // Method to display professor-specific details
    public void displayProfessorDetails() {
        displayDetails(); // Reuse Person's display method
        System.out.println("Department: " + department);
        System.out.println("Salary: $" + String.format("%.2f", salary));
        System.out.println("Specialization: " + specialization);
        System.out.println("-------------------------");
    }

    // Overriding the describeRole method from the Person class
    @Override
    public void describeRole() {
        System.out.println(name + " is a professor in the " + department + " department, specializing in " + specialization + ".");
    }

    // New method specific to the Professor class
    public void teachCourse(String courseName) {
        System.out.println(name + " is teaching " + courseName + ".");
    }
}

// Main class to test the Hierarchical Inheritance
public class UniversitySystem {
    public static void main(String[] args) {
        System.out.println("--- Demonstrating Hierarchical Inheritance ---");

        // 1. Create a Person object
        System.out.println("\nCreating a generic Person object:");
        Person genericPerson = new Person("John Doe", "P001");
        genericPerson.displayDetails();
        genericPerson.describeRole();
        System.out.println("-------------------------");

        // 2. Create a Student object (inherits from Person)
        System.out.println("\nCreating a Student object:");
        Student student1 = new Student("Jane Smith", "S101", "Computer Science", 3.85);
        student1.displayStudentDetails(); // Calls Student's specific display, which calls Person's
        student1.describeRole();          // Calls Student's overridden describeRole
        student1.study();                 // Calls Student's specific method
        System.out.println("-------------------------");

        // 3. Create a Professor object (inherits from Person)
        System.out.println("\nCreating a Professor object:");
        Professor prof1 = new Professor("Dr. Alan Turing", "F201", "Mathematics", 120000.00, "Artificial Intelligence");
        prof1.displayProfessorDetails(); // Calls Professor's specific display, which calls Person's
        prof1.describeRole();           // Calls Professor's overridden describeRole
        prof1.teachCourse("Advanced Algorithms"); // Calls Professor's specific method
        System.out.println("-------------------------");

        // Demonstrating polymorphism: Person reference can point to Student or Professor objects
        System.out.println("\nDemonstrating Polymorphism with Person references:");

        Person personRef1 = new Student("Emily White", "S102", "Biology", 3.5);
        System.out.println("\nStudent (via Person reference):");
        personRef1.displayDetails(); // Calls Person's displayDetails
        personRef1.describeRole();   // Calls Student's overridden describeRole (runtime polymorphism)
        // personRef1.study(); // Compile-time error: 'study' not defined in Person

        Person personRef2 = new Professor("Dr. Maria Curie", "F202", "Physics", 135000.00, "Quantum Mechanics");
        System.out.println("\nProfessor (via Person reference):");
        personRef2.displayDetails(); // Calls Person's displayDetails
        personRef2.describeRole();   // Calls Professor's overridden describeRole (runtime polymorphism)
        // personRef2.teachCourse("Nuclear Physics"); // Compile-time error: 'teachCourse' not defined in Person
        System.out.println("------------------------------------------");
    }
}
